{"version":3,"sources":["redux/selectors.js","redux/actions.js","components/AddContact/AddContact.js","components/Filter.js","components/ContactList/ContactList.js","App.js","redux/store.js","index.js","components/ContactList/ContactList.module.css","components/AddContact/AddContacts.module.css"],"names":["getContacts","state","contacts","getFilter","filter","getContactsFiltered","normalizedFilter","toLowerCase","contact","name","includes","formSubmitHandler","createAction","removeContact","changeFilter","AddContact","useState","setName","number","setNumber","dispatch","useDispatch","handlerInputChange","e","currentTarget","value","className","s","formAddContact","onSubmit","data","preventDefault","trim","length","alert","id","uuidv4","actions","addLable","inputFild","type","placeholder","onChange","Filter","useSelector","target","ContactList","contactsFiltered","title","contactList","map","contactItem","button","onClick","App","useEffect","localStorage","setItem","JSON","stringify","parsedContacts","parse","getItem","contactsReducer","createReducer","payload","filterReducer","_","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"kNAAaA,EAAc,SAACC,GAAD,OAAWA,EAAMC,UAC/BC,EAAY,SAACF,GAAD,OAAWA,EAAMG,QAE7BC,EAAsB,SAACJ,GAClC,IAAMC,EAAWF,EAAYC,GAGvBK,EAFSH,EAAUF,GAEOM,cAChC,OAAOL,EAASE,QAAO,SAACI,GAAD,OACrBA,EAAQC,KAAKF,cAAcG,SAASJ,O,eCP3BK,EAAoBC,YAAa,yBACjCC,EAAgBD,YAAa,yBAC7BE,EAAeF,YAAa,wB,wBCG1B,SAASG,IAAc,IAAD,EACXC,mBAAS,IADE,mBAC5BP,EAD4B,KACtBQ,EADsB,OAEPD,mBAAS,IAFF,mBAE5BE,EAF4B,KAEpBC,EAFoB,KAG7BC,EAAWC,cAGXC,EAAqB,SAACC,GAAO,IAAD,EACRA,EAAEC,cAAlBf,EADwB,EACxBA,KAAMgB,EADkB,EAClBA,MACD,SAAThB,GACFQ,EAAQQ,GAEG,WAAThB,GACFU,EAAUM,IAed,OACE,qCACE,4CACA,uBAAMC,UAAWC,IAAEC,eAAgBC,SAdlB,SAACN,GAZL,IAACO,EAahBP,EAAEQ,iBACEtB,EAAKuB,OAAOC,QAAU,GAAKf,EAAOc,OAAOC,QAAU,EACrDC,MAAM,uJAfQJ,EAiBL,CAAEK,GAAIC,cAAU3B,OAAMS,UAjBRE,EAASiB,EAA0BP,IAkB1Db,EAAQ,IACRE,EAAU,MAOV,UACE,wBAAOO,UAAWC,IAAEW,SAApB,iBAEE,uBACEZ,UAAWC,IAAEY,UACbC,KAAK,OACL/B,KAAK,OACLgB,MAAOhB,EACPgC,YAAY,gEACZC,SAAUpB,OAGd,wBAAOI,UAAWC,IAAEW,SAApB,mBAEE,uBACEZ,UAAWC,IAAEY,UACbC,KAAK,QACL/B,KAAK,SACLgC,YAAY,4EACZhB,MAAOP,EACPwB,SAAUpB,OAGd,wBAAQI,UAAU,kBAAkBc,KAAK,SAAzC,+BCxDO,SAASG,IACtB,IAAMvC,EAASwC,YAAYzC,GACrBiB,EAAWC,cACjB,OACE,qCACE,sDACA,uBACEoB,YAAY,+CACZC,SAAU,SAACnB,GAAD,OAAOH,EAASiB,EAAqBd,EAAEsB,OAAOpB,SACxDA,MAAOrB,O,oBCPA,SAAS0C,IACtB,IAAM5C,EAAW0C,YAAY5C,GACvB+C,EAAmBH,YAAYvC,GAE/Be,EAAWC,cAEjB,OAAwB,IAApBnB,EAAS+B,OAAqB,KAEhC,sBAAKP,UAAWC,IAAEzB,SAAlB,UACE,oBAAIwB,UAAWC,IAAEqB,MAAjB,sBACqB,IAApB9C,EAAS+B,OAAe,KAAO,cAACU,EAAD,IACH,IAA5BI,EAAiBd,OAChB,oBAAIP,UAAWC,IAAEsB,YAAjB,SACGF,EAAiBG,KAAI,gBAAGf,EAAH,EAAGA,GAAI1B,EAAP,EAAOA,KAAMS,EAAb,EAAaA,OAAb,OACpB,qBAAIQ,UAAWC,IAAEwB,YAAjB,UACE,uBAAMzB,UAAWC,IAAElB,KAAnB,UAA0BA,EAA1B,QACA,sBAAMiB,UAAWC,IAAET,OAAnB,SAA4BA,IAC5B,wBACEsB,KAAK,SACLd,UAAWC,IAAEyB,OACbC,QAAS,kBAAMjC,EAASiB,EAAsBF,KAHhD,sBAHiCA,QAcvC,yL,MC1BO,SAASmB,IACtB,IAAMpD,EAAW0C,YAAY5C,GAa7B,OAJAuD,qBAAU,WACRC,aAAaC,QAAQ,WAAYC,KAAKC,UAAUzD,MAC/C,CAACA,IAGF,sBAAKwB,UAAU,MAAf,UACE,cAACX,EAAD,IAEA,cAAC+B,EAAD,O,uCCjBAc,EAAiBF,KAAKG,MAAML,aAAaM,QAAQ,aACnDJ,KAAKG,MAAML,aAAaM,QAAQ,aAChC,GAEEC,EAAkBC,YAAcJ,GAAD,mBAClCvB,GAA4B,SAACpC,EAAD,GAAyB,IAAfgE,EAAc,EAAdA,QAErC,OADAT,aAAaC,QAAQ,WAAYC,KAAKC,UAAL,CAAgBM,GAAhB,mBAA4BhE,MACvD,CAAEgE,GAAR,mBAAoBhE,OAHa,cAKlCoC,GAAwB,SAACpC,EAAD,OAAUgE,EAAV,EAAUA,QAAV,OACvBhE,EAAMG,QAAO,SAACI,GAAD,OAAaA,EAAQ2B,KAAO8B,QANR,IAS/BC,EAAgBF,YAAc,GAAD,eAChC3B,GAAuB,SAAC8B,EAAD,YAAMF,YAG1BG,EAAU,sBAAOC,eAAP,CAA+BC,MAWhCC,EATDC,YAAe,CAC3BC,QAAS,CACPvE,SAAU6D,EACV3D,OAAQ8D,GAEVE,aACAM,UAAUC,IC3BZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJQ,SAASC,eAAe,U,kBCZ1BC,EAAOC,QAAU,CAAC,SAAW,8BAA8B,MAAQ,2BAA2B,YAAc,iCAAiC,YAAc,iCAAiC,KAAO,0BAA0B,OAAS,4BAA4B,OAAS,8B,kBCA3QD,EAAOC,QAAU,CAAC,eAAiB,oCAAoC,SAAW,8BAA8B,UAAY,kC","file":"static/js/main.3b296102.chunk.js","sourcesContent":["export const getContacts = (state) => state.contacts;\r\nexport const getFilter = (state) => state.filter;\r\n\r\nexport const getContactsFiltered = (state) => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n\r\n  const normalizedFilter = filter.toLowerCase();\r\n  return contacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(normalizedFilter)\r\n  );\r\n};\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const formSubmitHandler = createAction('contact/SubmitHandler');\r\nexport const removeContact = createAction('contact/removeContact');\r\nexport const changeFilter = createAction('contact/changeFilter');\r\n","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport * as actions from '../../redux/actions';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n// import PropTypes from 'prop-types';\r\nimport s from './AddContacts.module.css';\r\n\r\nexport default function AddContact() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const dispatch = useDispatch();\r\n  const onSubmit = (data) => dispatch(actions.formSubmitHandler(data));\r\n\r\n  const handlerInputChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n    if (name === 'name') {\r\n      setName(value);\r\n    }\r\n    if (name === 'number') {\r\n      setNumber(value);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (name.trim().length <= 2 || number.trim().length <= 6) {\r\n      alert('Введите коректное значение');\r\n    } else {\r\n      onSubmit({ id: uuidv4(), name, number });\r\n      setName('');\r\n      setNumber('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>Phonebook </h1>\r\n      <form className={s.formAddContact} onSubmit={handleSubmit}>\r\n        <label className={s.addLable}>\r\n          Name\r\n          <input\r\n            className={s.inputFild}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            placeholder=\"Введите имя\"\r\n            onChange={handlerInputChange}\r\n          ></input>\r\n        </label>\r\n        <label className={s.addLable}>\r\n          Number\r\n          <input\r\n            className={s.inputFild}\r\n            type=\"phone\"\r\n            name=\"number\"\r\n            placeholder=\"Введите номер\"\r\n            value={number}\r\n            onChange={handlerInputChange}\r\n          ></input>\r\n        </label>\r\n        <button className=\"add-contact-btn\" type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\n// AddContact.propTypes = {\r\n//   onSubmit: PropTypes.func.isRequired,\r\n// };\r\n","// import PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getFilter } from '../redux/selectors';\r\nimport * as actions from '../redux/actions';\r\nexport default function Filter() {\r\n  const filter = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <>\r\n      <h3>Find contact by name</h3>\r\n      <input\r\n        placeholder=\"Что ищем?\"\r\n        onChange={(e) => dispatch(actions.changeFilter(e.target.value))}\r\n        value={filter}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n// Filter.propTypes = {\r\n//   filter: PropTypes.string,\r\n//   changeFilter: PropTypes.func.isRequired,\r\n// };\r\n","import Filter from '../Filter';\r\n// import PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as actions from '../../redux/actions';\r\nimport { getContacts, getContactsFiltered } from '../../redux/selectors';\r\nimport s from './ContactList.module.css';\r\nexport default function ContactList() {\r\n  const contacts = useSelector(getContacts);\r\n  const contactsFiltered = useSelector(getContactsFiltered);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  if (contacts.length === 0) return null;\r\n  return (\r\n    <div className={s.contacts}>\r\n      <h1 className={s.title}>Contacts</h1>\r\n      {contacts.length === 1 ? null : <Filter />}\r\n      {contactsFiltered.length !== 0 ? (\r\n        <ul className={s.contactList}>\r\n          {contactsFiltered.map(({ id, name, number }) => (\r\n            <li className={s.contactItem} key={id}>\r\n              <span className={s.name}>{name}: </span>\r\n              <span className={s.number}>{number}</span>\r\n              <button\r\n                type=\"button\"\r\n                className={s.button}\r\n                onClick={() => dispatch(actions.removeContact(id))}\r\n              >\r\n                Delete\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>Такого контакта в списке нет!</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// ContactList.propTypes = {\r\n//   contacts: PropTypes.array,\r\n//   contactsFiltered: PropTypes.array.isRequired,\r\n//   onRemove: PropTypes.func.isRequired,\r\n//   filter: PropTypes.string,\r\n//   onChange: PropTypes.func,\r\n// };\r\n","import { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { getContacts } from './redux/selectors';\nimport AddContact from './components/AddContact/AddContact';\nimport ContactList from './components/ContactList/ContactList';\n\nimport './App.css';\n\nexport default function App() {\n  const contacts = useSelector(getContacts);\n\n  // useEffect(() => {\n  //   const parsedContacts = JSON.parse(localStorage.getItem('contacts'));\n  //   if (parsedContacts) {\n  //     setContacts(parsedContacts);\n  //   }\n  // }, []);\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  return (\n    <div className=\"App\">\n      <AddContact />\n\n      <ContactList />\n    </div>\n  );\n}\n","// import { combineReducers } from 'redux';\r\nimport {\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n  createReducer,\r\n} from '@reduxjs/toolkit';\r\nimport * as actions from './actions';\r\nimport logger from 'redux-logger';\r\n\r\nconst parsedContacts = JSON.parse(localStorage.getItem('contacts'))\r\n  ? JSON.parse(localStorage.getItem('contacts'))\r\n  : [];\r\n\r\nconst contactsReducer = createReducer(parsedContacts, {\r\n  [actions.formSubmitHandler]: (state, { payload }) => {\r\n    localStorage.setItem('contacts', JSON.stringify([payload, ...state]));\r\n    return [payload, ...state];\r\n  },\r\n  [actions.removeContact]: (state, { payload }) =>\r\n    state.filter((contact) => contact.id !== payload),\r\n});\r\n\r\nconst filterReducer = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst middleware = [...getDefaultMiddleware(), logger];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n    filter: filterReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactList_contacts__KFppd\",\"title\":\"ContactList_title__245tE\",\"contactList\":\"ContactList_contactList__1_Rq-\",\"contactItem\":\"ContactList_contactItem__p1Dxc\",\"name\":\"ContactList_name__AKKZE\",\"number\":\"ContactList_number__1Pwiu\",\"button\":\"ContactList_button__1q0yK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formAddContact\":\"AddContacts_formAddContact__27KOX\",\"addLable\":\"AddContacts_addLable__3eg55\",\"inputFild\":\"AddContacts_inputFild__3xYq6\"};"],"sourceRoot":""}